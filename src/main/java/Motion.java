/**
 * Интерфейс предназначен для описания самостоятельно движущихся объектов,
 * способных преодолевать путь с объектами, имплементирующими интерфейс Difficultnes.
 * Motion имеет дефолтные методы для описания пробегания по дороге и прыжков через стену,
 * которые возвращают булево значение, которое говорит о том, может ли движущийся объект
 * продолжать движение (если препятствие преодолено - вернёт true, если нет - то false).
 */
public interface Motion {
    /**
     * Дефолтный метод описания пробегания по дороге.
     * Метод предоставляет достаточно подробное консольное описание преодоления пути.
     * На вход принимает:
     * @param distance double  - дистанцию забега (длину дороги);
     * @param name     String  - имя движущегося объекта;
     * @param limit    double  - расстояние, которое способен преодолеть объект за один раз;
     * @param moveNext boolean - способность объекта продолжать движение;
     *                 В процессе движения может меняться с true на false;
     * @return Возвращает конечное состояние параметра moveNext.
     *
     */
    default boolean run(double distance, String name, double limit, boolean moveNext) {
        if (moveNext) {
            if (distance > 0 && distance <= limit) {
                System.out.printf("%s пробежал %.0f метров\n", name, distance);
            } else if (distance > limit) {
                System.out.printf("%s устал, пробежав %.1f метров и не может двигаться дальше\n", name, limit);
                moveNext = false;
                System.out.printf("%s сошел с дистанции ранее и не побежал дальше\n", name);
            } else if (distance < 0) {
                System.out.printf("%s убежал в обратном направлении\n", name);
                moveNext = false;
                System.out.printf("%s сошел с дистанции и не побежал дальше\n", name);
            }
        }
    /*    else {
            System.out.printf("%s сошел с дистанции ранее и не побежал дальше\n", name);
            moveNext = false;
        }
    */
        return moveNext;
    }

    /**
     * Дефолтный метод описания прыжков. Содержит подробный консольный вывод.
     * @param high      double  - высота препятствия, может быть нулевой и отрицательной;
     * @param name      String  - имя объекта;
     * @param barier    double  - высота на, которую объект может запрыгнуть;
     * @param limit     double  - максимальная высота, на которую может вскарабкаться объект;
     * @param moveNext  boolean - способность объекта продолжать движение;
     *                  В процессе движения может меняться с true на false;
     * @return возвращает конечное значение moveNext.
     */
    default boolean jump(double high, String name, double barier, double limit, boolean moveNext) {
        if (moveNext) {
            if (high > 0 && high <= barier) {
                System.out.printf("%s перепрыгнул %.1f-метровую преграду\n", name, high);
            } else if (high > barier && high <= limit) {
                System.out.printf("%s смог перелезть через %.1f-метровую стену\n", name, high);
            } else if (high > limit) {
                System.out.printf("%s не смог преодолеть %.1f-метровое препятствие\n", name, high);
                moveNext = false;
                System.out.printf("%s сошел с дистанции ранее и не побежал дальше\n", name);
            } else if (high == 0) {
                System.out.printf("%s не заметил препятствия на пути\n", name);
            } else if (high < 0 && high >= (-(limit))) {
                System.out.printf("%s свалился в яму, глубиной %.1f метра, но выбрался\n", name, -high);
            } else {
                System.out.printf("%s свалился в глубокую яму и не сможет самостоятельно выбраться\n", name);
                moveNext = false;
                System.out.printf("%s сошел с дистанции и не побежал дальше\n", name);
            }
        }
    // блок кода в комментарии здесь и выше напоминал о сходе с дистанции каждый раз, это бесило,
    // поэтому теперь программа говорит о сходе с дистанции единожды, потом не упоминает "бегуна".
        /*    else {
            System.out.printf("%s сошел с дистанции ранее и не побежал дальше\n", name);
            moveNext = false;
        }
        */
        return moveNext;
    }

    /**
     * Движущемуся объекту необходимо имплементировать метод, выводящий в консоль сведения о нём.
     * Желательно, чтобы вывод содержал имя объекта и его способность продолжать движение.
     */
    void aboutRunner();

    /**
     * Движущийся объект должен имплементировать метод для преодоления абстрактных препятствий
     * @param step в качестве аргумента принимает препятствие, имплементирующее интерфейс Difficultness.
     *             желательно разобрать в методе все возможные типы препятствий, с которыми будет
     *             взаимодеййствовать движущийся объект.
     * @return Метод должен вернуть булево значение: может ли объект продолжить движение, или нет.
     */
    boolean goOn(Difficultness step);

    /**
     * Метод сделан для того, чтобы
     * 1)будущие объекты обязательно имели геттер для булева значения способности продолжать движение;
     * 2)это значение можно было вызывать универсальным методом.
     * @return возвращает true, если объект готов продолжить движение,
     *         или false, если продолжение движения невозможно.
     */
    boolean getMoveNext();
}
